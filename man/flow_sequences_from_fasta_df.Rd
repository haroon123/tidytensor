% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fasta_encode_tensor.R
\name{flow_sequences_from_fasta_df}
\alias{flow_sequences_from_fasta_df}
\title{A keras-style generator function for training batches of sequence data stored in fasta-formatted files, via data.frame.}
\usage{
flow_sequences_from_fasta_df(df, directory = NULL,
  filename_col = "filename", ids_col = "seqid",
  targets_col = "class", class_mode = "categorical", batch_size = 32,
  shuffle = TRUE, seed = NULL, alphabet = "nucleotide",
  trim_to = NULL, ...)
}
\arguments{
\item{df}{data.frame to read filenames, sequence IDs, and target values from.}

\item{directory}{Directory where to find the files; present working directory if NULL.}

\item{filename_col}{= column name for identifying filenames.}

\item{ids_col}{column name for identifying sequence IDs.}

\item{targets_col}{column name for identifying targets.}

\item{class_mode}{how the encode the target column into a target tensor; one of "categorical", "binary", or "identity".}

\item{batch_size}{number of sequences to include in each batch.}

\item{shuffle}{whether to reshuffle sequences between epochs (once all batches have been generated and recycling happens).}

\item{seed}{random seed to set before each re-shuffle,}

\item{alphabet}{either "nucleotide", "protein", or a named list that specifies the encoding, per base.}

\item{trim_to}{integer length to trim all sequences to if they are longer; if NULL, trim to shortest sequence in the files.}

\item{...}{additional arguments to be passed to or from methods (ignored).}
}
\value{
a new tensortree.
}
\description{
Given data.frame of fasta file paths, sequence IDs and target values, returns a generator function generating
a list with two elements: the first being the tensor encoding the relavent sequences, and the second being a tensor encoding the targets.
The \code{class_mode} parameter takes the same values as  \code{\link{keras::flow_images_from_dataframe}} class_mode parameter,
with the addition of an "identity" option to support regression (no transformation of targets).
}
\details{
\code{alphabet} may be set to \code{"nucleotide"} (for length-four one-hot encodings (or multi-hot if IUPAC codes))
are used)), \code{"protein"} (length-20 one-hot encodings), or a named list specifying per-base encodings; see examples. If any IDs are
specified that are not contained in the corresponding fasta_file a warning
will be produced, and the corresponding targets will be removed from the returned targets tensor.

If \code{class_mode = "categorical"}, the targets are first integer-encoded with integers \code{1} through \code{length(unique(targets))} (using \code{as.integer(factor(targets))}, so generally
integer targets will be assigned in increasing target order), since \code{keras::to_categorical} can only accept integer labels. \code{dimnames()} of
of the target tensor will be set to preserve the original target labels. If \code{targets} is a factor, factor ordering will be used in determining one-hot encoding order.
}
\examples{
df <- data.frame(filename = c("inst/extdata/seqs.fasta", "inst/extdata/seqs.fasta", "inst/extdata/seqs2.fasta", "inst/extdata/seqs2.fasta"),
                 seqid = c("EP680779", "EP433799", "EP619387", "EP637315"),
                 class = c("yes", "no", "yes", "yes"))

gen <- flow_sequences_from_fasta_df(df, class_mode = "binary")
batch <- gen()


df <- data.frame(filename = c("inst/extdata/seqs.fasta", "inst/extdata/seqs.fasta", "inst/extdata/seqs2.fasta", "inst/extdata/seqs2.fasta"),
                    seqid = c("EP680779", "EP433799", "EP619387", "EP637315"),
                   class = c(-1.2, 2.5, 6, 3.1))

gen <- flow_sequences_from_fasta_df(df, class_mode = "identity")
batch <- gen()

# specify an alternative target encoding
gen <- flow_sequences_from_fasta_df(df, class_mode = "identity", alphabet = list(A = c(1, 0),
                                                                              C = c(0, 1),
                                                                              G = c(0, -1)
                                                                              T = c(-1, 0))


}
\seealso{
\code{\link{fasta_encode_tensor}}.
}
